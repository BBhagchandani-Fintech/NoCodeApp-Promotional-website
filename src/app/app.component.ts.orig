import { environment } from './../environments/environment';
import { Component, OnInit, ViewChild } from '@angular/core';
import { Utility } from './shared/utility';
import { CookieService } from './shared/cookie.service';
import { Router } from '@angular/router';
import { LoginService } from './pages/login/login.service';
import { CommonService } from './shared/common.service';
import { MatDrawer } from '@angular/material/sidenav';
import * as io from 'socket.io-client';
import { Location } from '@angular/common';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.scss']
})
export class AppComponent extends Utility implements OnInit  {
  title = 'officebcp_webclient';
  constructor(
    private router: Router,
    private Cookie: CookieService,
    private service: LoginService,
    private location: Location,
  ) { super(); }

  public static socket;
  SetlocalStoragePermissison: any = [];
  expand = true;
  accespagelogin = false;
  accespagesignup = false;
  accessPageResetPassword = false;
  notify = false;
  data = '';
  currentUrl = '';
  user_name = '';
  userEmail = '';
  errorCount = null;
  showUnReadFlag = false;
  showReadFlag = false;
  errorStatus = 'normal';
  shownotification = false;
  readonly config = environment
  notificationData: ErrorData[] = [];
  @ViewChild('drawer') mydrawer: MatDrawer;

ngOnInit(): void { 

  this.currentUrl = this.location.path();
    this.currentUrl = this.currentUrl ? this.currentUrl.toLowerCase() : this.currentUrl;
    if (!this.Cookie.getCookie('usertoken')) {
      if (this.currentUrl.includes('/login')) {
        this.accespagelogin = true;
        this.accessPageResetPassword = false;
      } else if (this.currentUrl.includes('/reset-password/')) {
        this.accespagelogin = false;
        this.accessPageResetPassword = true;
      }
     
    } else {
      if (AppComponent.socket == undefined || AppComponent.socket.disconnected) {
        AppComponent.socket = io(this.config.websocket.URL, {
          query:
            { token: this.Cookie.getCookie('usertoken').toString() },
          transports: ['websocket']
        });
        AppComponent.socket.on('connected', (message: any) => {
          this.getdetails().then((res: any) => {
            this.getNotifications();
          });
        });
      }
      else {
        this.getdetails().then((res: any) => {
          this.getNotifications();
        });
      }
    }
    this.callingmethod();
}
async callingmethod() {
  try {
    if (!this.Cookie.getCookie('usertoken')) {
      this.Cookie.clearCookies();
      this.user_name = '';
<<<<<<< HEAD
      // Check if request is not for reset and login page and redirect to login page.
      if (!this.accessPageResetPassword && !this.accespagelogin) {
        // this.router.navigate(['/home']);
=======
        if (this.accespagelogin  ) {
        this.router.navigate(['/login']);
>>>>>>> 776c97f6d6f0a36fe0c977a05df20bf534d441af
      }
      
      this.SetlocalStoragePermissison = [];
      CommonService.GlobalVar = [];
    } else {
      if (CommonService.GlobalVar === undefined || CommonService.GlobalVar.length === 0) {
        await this.getuserpermisison();
      }
      this.accespagelogin = true;
      this.accessPageResetPassword = false;
      await this.getdetails();
      if (CommonService.MustChangePassword && this.router.url.indexOf('change-password') < 0) {
        this.router.navigate(['/change-password']);
      } else if (this.router.url.indexOf('login') > 0 || this.router.url.indexOf('reset-password') > -1) {
        this.router.navigate(['/login']);
      }
      else if(this.router.url.indexOf('login') > 0){
        this.router.navigate(['/login']);

      }
    }

  } catch (e) {
    
  }
}
getNotifications() {
  try {
    AppComponent.socket.emit('NOTIFICATIONREQUEST', 'Login Successfully');
    AppComponent.socket.on(this.userEmail, (res: any) => {
      this.errorCount = null;
      if (res && res.notification && res.notification.length > 0) {
        this.notificationData = res.notification;
        if (this.notificationData) {
          this.setColorCount();
        }
      }
    });    
  
  } catch (e) {
    
  }
}
setColorCount() {
  try {
    let flag = 0;
    this.errorStatus = 'normal';
    this.showUnReadFlag = false;
    this.showReadFlag = false;
    this.notificationData.forEach(
      x => {
        let count = 0;
        let unReadFlag = false;
        if (x.messages && x.messages.length > 0) {
          x.messages.forEach(y => {
            if (!y.markasread) {
              flag = 1;
              count++;
              unReadFlag = true;

              if (y.type && (this.errorStatus == 'warning' || this.errorStatus == 'normal') && y.type.toLowerCase() == 'error') {
                this.errorStatus = 'error';
                return;
              } else if (y.type && this.errorStatus == 'normal' && y.type.toLowerCase() == 'warning') {
                this.errorStatus = 'warning';
              }
            }
          });
        }

        if (count == x.messages.length) {
          x.showRead = false;
        } else {
          x.showRead = true;
          this.showReadFlag = true;
        }
        x.showUnRead = unReadFlag;
        if (x.showUnRead) {
          this.showUnReadFlag = true;
        }

        this.errorCount += count;
      }
    );

    if (flag == 0) {
      this.errorStatus = 'normal';
    }
  } catch (e) {
    
  }
}
async getdetails() {
  try {
    if (this.user_name === '') {
    }
  } catch (e) {
    
  }
}
async getuserpermisison() {
  try {
     const data: any = []; 
      data.push({
        is_active: 1,
        permission_id: null,
        permission_name: 'home',
        permissions: [2],
        total: 2,
        upm_id: null
      }
      );
    CommonService.GlobalVar = [];
    this.SetlocalStoragePermissison = [];
    for (const userper of data) {
      userper.permission_name = userper.permission_name.toLowerCase();
      if (userper.total > 0) {
        this.SetlocalStoragePermissison.push(Object.assign({}, userper));
      }
    }
    CommonService.GlobalVar = this.SetlocalStoragePermissison;
  } catch (e) {
    return;
  }
}
redirectToLogin() {
  this.user_name = '';
  this.SetlocalStoragePermissison = [];
  CommonService.GlobalVar = [];
  this.Cookie.clearCookies();
  this.accespagelogin = true;
  this.router.navigate(['/login']);
}
onSubmit() {
}
}

export class ErrorData {
  component: string;
  messages: message[];
  showUnRead: boolean;
  showRead: boolean;
}

export class message {
  message: string;
  markasread: boolean;
  guid: string;
  type: string;
}
